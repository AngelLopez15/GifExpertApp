{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","categories","type","value","onChange","target","prototype","PropTypes","func","isRequired","getGifs","category","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","className","src","alt","GifGrid","loading","state","setstate","useEffect","then","imgs","setTimeout","useFetchGifs","key","GifExpertApp","ReactDOM","render","document","getElementById"],"mappings":"wPAGaA,EAAc,SAAC,GAAqB,IAApBC,EAAmB,EAAnBA,cAAmB,EACRC,mBAAS,IADD,mBACrCC,EADqC,KACzBC,EADyB,KAc5C,OACI,0BAAMC,SATY,SAACC,GACnBA,EAAEC,iBACCJ,EAAWK,OAAOC,OAAO,IACxBR,GAAc,SAAAS,GAAU,OAAKP,GAAL,mBAAoBO,OAC5CN,EAAc,OAMd,2BACIO,KAAK,OACLC,MAAOT,EACPU,SAhBa,SAACP,GACtBF,EAAcE,EAAEQ,OAAOF,YAqB/BZ,EAAYe,UAAY,CACpBd,c,OAAee,EAAUC,KAAKC,Y,2BC5BrBC,EAAO,uCAAE,WAAOC,GAAP,uBAAAC,EAAA,6DACZC,EADY,0DAC6CC,UAAUH,GADvD,sDAECI,MAAMF,GAFP,cAEZG,EAFY,gBAGGA,EAAKC,OAHR,uBAGXC,EAHW,EAGXA,KAEDC,EAAOD,EAAKE,KAAI,SAAAC,GAClB,MAAO,CACHC,GAAGD,EAAIC,GACPC,MAAMF,EAAIE,MACVV,IAAIQ,EAAIG,OAAOC,iBAAiBZ,QATtB,kBAaXM,GAbW,4CAAF,sDCCPO,EAAc,SAAC,GAAkB,IAAjBH,EAAgB,EAAhBA,MAAOV,EAAS,EAATA,IAChC,OACI,6BACI,yBAAKc,UAAU,4CACX,yBAAKC,IAAKf,EAAKgB,IAAKN,IACpB,2BAAIA,MCFPO,EAAU,SAAC,GAAgB,IAAfnB,EAAc,EAAdA,SAAc,ECFX,SAACA,GAAc,IAAD,EAEZlB,mBAAS,CAC/ByB,KAAK,GACLa,SAAQ,IAJ0B,mBAE/BC,EAF+B,KAExBC,EAFwB,KAoBtC,OAZAC,qBAAU,WACNxB,EAAQC,GACHwB,MAAK,SAAAC,GACFC,YAAW,WACPJ,EAAS,CACLf,KAAKkB,EACLL,SAAQ,MAEd,UAEZ,CAACpB,IAEIqB,EDhBwBM,CAAa3B,GAAhCa,EAFuB,EAE5BN,KAAaa,EAFe,EAEfA,QAEpB,OACI,kBAAC,WAAD,KACI,wBAAIJ,UAAU,yCAAyChB,GAItDoB,GAAW,uBAAGJ,UAAU,oCAAb,WACZ,yBAAKA,UAAU,aAEPH,EAAOJ,KAAI,SAAAC,GAAG,OACV,kBAAC,EAAD,eACIkB,IAAKlB,EAAIC,IACLD,UEjBnBmB,EAAe,WAAO,IAAD,EAEM/C,mBAAS,CAAC,cAFhB,mBAEvBQ,EAFuB,KAEXT,EAFW,KAU9B,OACI,kBAAC,WAAD,KACI,4CACA,kBAAC,EAAD,CAAaA,cAAeA,IAC5B,6BAEA,4BAEQS,EAAWmB,KAAI,SAAAT,GAAQ,OAMnB,kBAAC,EAAD,CACI4B,IAAK5B,EACLA,SAAUA,UCxBtC8B,IAASC,OACL,kBAAC,EAAD,MACAC,SAASC,eAAe,W","file":"static/js/main.695897de.chunk.js","sourcesContent":["import React, {useState} from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\nexport const AddCategory = ({setCategories}) => {\r\n    const [inputValue, setInputValue] = useState('')\r\n\r\n    const handleInputChange= (e) => {\r\n        setInputValue(e.target.value)\r\n    }\r\n    const handeleSubmit = (e) => {\r\n        e.preventDefault()\r\n        if(inputValue.trim().length>2){\r\n            setCategories(categories => [inputValue, ...categories])\r\n            setInputValue('')\r\n        }\r\n    }\r\n    // como el form ya agrupa los elementos podemos quitar el fragment\r\n    return (\r\n        <form onSubmit={handeleSubmit}>\r\n            <input \r\n                type=\"text\"\r\n                value={inputValue}\r\n                onChange={handleInputChange}\r\n            />\r\n        </form>\r\n    )\r\n}\r\n\r\nAddCategory.prototype = {\r\n    setCategories: PropTypes.func.isRequired\r\n}","\r\nexport const getGifs= async (category) =>{\r\n    const url = `https://api.giphy.com/v1/gifs/search?limit=10&q=${encodeURI(category)}&api_key=Mt2XmwVPd8YIU6DzqxRowPh77rUyv00Z`\r\n    const resp = await fetch(url)\r\n    const {data} = await resp.json()\r\n\r\n    const gifs = data.map(img => {\r\n        return {\r\n            id:img.id,\r\n            title:img.title,\r\n            url:img.images.downsized_medium.url\r\n        }\r\n    })\r\n    \r\n    return gifs\r\n}","import React from 'react'\r\n\r\nexport const GifGridItem = ({title, url}) => {\r\n    return (\r\n        <div>\r\n            <div className=\"card animate__animated animate__fadeInUp\">\r\n                <img src={url} alt={title} />\r\n                <p>{title}</p>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n","import React, {Fragment} from 'react'\r\nimport { useFetchGifs } from '../hooks/useFetchGifs'\r\nimport { GifGridItem } from './GifGridItem'\r\n\r\n\r\nexport const GifGrid = ({category}) => {\r\n    // con el \":\" renombramos el nombre data por images para una mejor comprension \r\n    const {data:images, loading} = useFetchGifs(category)\r\n\r\n    return (\r\n        <Fragment>\r\n            <h3 className=\"animate__animated animate__backInLeft\">{category}</h3>\r\n            {/* se ocupa un perador logico && para evitar el ternario\r\n            ya que si es false en el teernario hay que null y con el &&\r\n            solo no ponemos nada si es false */}\r\n            {loading && <p className=\"animate__animated animate__flash\">loading</p> }\r\n            <div className=\"card-grid\">\r\n                {\r\n                    images.map(img =>(\r\n                        <GifGridItem \r\n                            key={img.id}\r\n                            {...img}\r\n                        />\r\n                    ))\r\n                }\r\n            </div>\r\n        </Fragment>\r\n    )\r\n}\r\n","import {useState, useEffect} from 'react'\r\nimport { getGifs } from '../helpers/getGifs'\r\n\r\nexport const useFetchGifs = (category) => {\r\n\r\n    const [state, setstate] = useState({\r\n        data:[],\r\n        loading:true\r\n    })\r\n\r\n    // para hacer que la peticion se haga solo una vez\r\n    useEffect(()=>{\r\n        getGifs(category)\r\n            .then(imgs => {\r\n                setTimeout(()=>{\r\n                    setstate({\r\n                        data:imgs,\r\n                        loading:false\r\n                    })\r\n                },1000)\r\n            })\r\n    },[category])\r\n\r\n    return state\r\n}\r\n","import React, { Fragment, useState } from 'react'\r\nimport { AddCategory } from './components/AddCategory'\r\nimport {GifGrid} from './components/GifGrid' \r\n\r\nexport const GifExpertApp = () => {\r\n    \r\n    const [categories, setCategories] = useState(['one punch'])\r\n\r\n    // const handleAdd = () => {\r\n    //     setCategories([...categories,'X-Hunter'])\r\n    //     // otra forma de hacerlo es con un callback\r\n    //     // setCategories(categories => [...categories, 'X-hunter'])\r\n    // }\r\n\r\n    return (\r\n        <Fragment>\r\n            <h2>GifExpertApp</h2>\r\n            <AddCategory setCategories={setCategories} />\r\n            <hr />\r\n            {/* <button onClick={()=>handleAdd()}>Agregar</button> */}\r\n            <ol>\r\n                {\r\n                    categories.map(category => (\r\n                        // return <li\r\n                        //     key={category}\r\n                        // >\r\n                        //     {category}\r\n                        // </li>\r\n                        <GifGrid \r\n                            key={category}\r\n                            category={category}\r\n                        />\r\n                    ))\r\n                }\r\n            </ol>\r\n        </Fragment>\r\n    )\r\n}\r\n\r\n\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n\nimport {GifExpertApp} from './GifExpertApp'\n\nReactDOM.render(\n    <GifExpertApp />,\n    document.getElementById('root')\n);\n\n\n"],"sourceRoot":""}